/**
 * オブジェクト指向による設計効果の検証
 * - 重複コード
 *   - 必要なロジックがクラスに集まるため、別のクラスに重複コードが書き散らされにくくなった
 * - 修正漏れ
 *   - 重複コード解消に伴い、修正漏れも発生しにくい
 * - 可読性低下
 *   - 必要なロジックはクラスに集めているため、でバック時や仕様変更時に阿知こと関連ロジックを探し回らずにすみ、可読性が向上した
 * - 生焼けオブジェクト
 *   - コンストラクタで、インスタンス変数の値を確定し、未初期化状態が亡くなった
 * - 不正値の混入
 *   - 不整地を弾くガード節を用意し、インスタンス変数を不変にすることで、不整地が混入されないようになった
 * - 思わぬ副作用
 *   - 不変にすることで思わぬ副作用から解放された
 * - 値の渡し間違い
 *   - 引数を特定の方にすることで、異なる方の値をコンパイラで防止できるようになった
 */

/**
 * 設計パターンの例(デザインパターン)
 * - 完全コンストラクタ
 *   - 不正状態かあら防護する
 * - 値オブジェクト
 *   - 特定の値に関するロジックを高凝集にする
 * - ストラテジ
 *   - 条件分岐を削減し、ロジックを単純化する
 * - ポリシー
 *   - 条件分岐を単純化したり、カスタマイズできるようにする
 * - ファーストコレクション
 *   - 値オブジェクトの亜種で、コレクションに関するロジックを高凝集にする
 * - スプラウトクラス
 *   - 既存のロジックを変更せずに安全に新機能を追加する
 */

/**
 * この章では完全コンストラクタと値オブジェクトの設計パターンを適用した
 */
